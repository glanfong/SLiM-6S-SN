// --- FUNCTIONS ---

// - DIVERSITY INDEX -

function (void)diversityIndex(integer sampleSize)
{
	totalPoly = 0;
	nbComp = 0;
	n = 0;
	a1 = 0;
	a2 = 0;
	
	// -- SAMPLE sampleIndividuals AND TAKE THEIR GENOMES --
	samp = p1.sampleIndividuals(sampleSize, replace=F).genomes;
	
	// -- ESTIMATES MEAN NUMBER OF PAIRWISE DIFFERENCES--
	
	for(i in samp){
		mut_i = i.mutations;
		j = i;
		
		for(j in samp){
			if(j != i){
				mut_j = j.mutations;
				shared = sum(match(mut_i, mut_j) >= 0);
				unshared = mut_i.size() + mut_j.size() - shared;
				totalPoly = totalPoly + unshared;
				nbComp = nbComp + 1;
			}
		}
		
		n = n + 1;
		
		if (n < size(samp)){
			a1 = a1+1/n;
			a2 = a2+1/n^2;
		}
	}
	
	totalPoly = totalPoly / nbComp;
	S = size(unique(samp.mutations));
	
	// --- DIVERSITY INDEX : PI ---
	pi = totalPoly / (sim.chromosome.lastPosition + 1);
	
	// --- DIVERSITY INDEX : TAJIMA'S D ---
	
	b1 = (n+1)/(3*(n-1));
	b2 = 2*(n^2+n+3)/(9*n*(n-1));
	
	c1 = b1-1/a1;
	c2 = b2-(n+2)/(a1*n)+(a2/a1^2);
	
	e1 = c1/a1;
	e2 = c2/(a1^2+a2);
	
	D = (totalPoly-S/a1)/(e1*S+e2*S*(S-1))^0.5;
	
	cat("Generation = " +(sim.generation-1)+" Pi = "+pi+" D = "+D+"\n");

}

// -- CLOCK --

function (void) logReport(string file, float start, string outcome) {
	
	mutFreq = getMutFrequency(p1, m2);
	seed = getSeed();
	
	if (outcome == "LOWF") {
		if (debug) {
			writeFile(debugFile, "-------------- LOWF --------------", append = T);
		}
		
		writeFile(file, "sim_id\toutcome\tNeA\tNeB\ts\tr\tmu\tL\tm\tmut_pos\trise_gen\tloss_gen\tend_gen\tsamp\tmut_freq\trun_CPU_time(s)\tchg_r\tsplit_gen\tchg_gen", append = T);
		
		writeFile(file , sim_id + "\tLOWF\t" + NeA + "\t" + NeB + "\t" + s + "\t" + r + "\t" + mu + "\t" + L + "\t" + m + "\t" + mut_pos + "\t" + rise_gen + "\t" + loss_gen + "\t" + end_gen + "\t" + samp + "\t" + mutFreq + "\t" + asString(clock(type="mono") - start) + "\t" + chg_r + "\t" + split_gen + "\t" + chg_gen, append = T);
	}
	
	if (outcome == "LOSS") {
		if (debug) {
			writeFile(debugFile, "-------------- LOSS --------------", append = T);
		}
		
		writeFile(file, "sim_id\toutcome\tNeA\tNeB\ts\tr\tmu\tL\tm\tmut_pos\trise_gen\tloss_gen\tend_gen\tsamp\tmut_freq\trun_CPU_time(s)\tchg_r\tsplit_gen\tchg_gen", append = T);
		
		writeFile(file , sim_id + "\tLOSS\t" + NeA + "\t" + NeB + "\t" + s + "\t" + r + "\t" + mu + "\t" + L + "\t" + m + "\t" + mut_pos + "\t" + rise_gen + "\t" + loss_gen + "\t" + end_gen + "\t" + samp + "\t" + mutFreq + "\t" + asString(clock(type="mono") - start) + "\t" + chg_r + "\t" + split_gen + "\t" + chg_gen, append = T);
	}
	
	if (outcome == "FIXED") {
		if (debug) {
			writeFile(debugFile, "-------------- FIXED --------------", append = T);
		}
		
		writeFile(file, "sim_id\toutcome\tNeA\tNeB\ts\tr\tmu\tL\tm\tmut_pos\trise_gen\tfix_gen\tend_gen\tsamp\tmut_freq\trun_CPU_time(s)\tchg_r\tsplit_gen\tchg_gen", append = T);
		
		writeFile(file , sim_id + "\tFIXED\t" + NeA + "\t" + NeB + "\t" + s + "\t" + r + "\t" + mu + "\t" + L + "\t" + m + "\t" + mut_pos + "\t" +  rise_gen + "\t" + fix_gen + "\t" + end_gen + "\t" + samp + "\t1\t" + asString(clock(type="mono") - start) + "\t" + chg_r + "\t" + split_gen + "\t" + chg_gen, append = T);
	}
	
	if (outcome == "SEG") {
		if (debug) {
			writeFile(debugFile, "-------------- SEG --------------", append = T);
		}
		
		writeFile(file, "sim_id\toutcome\tNeA\tNeB\ts\tr\tmu\tL\tm\tmut_pos\trise_gen\tfix_gen\tend_gen\tsamp\tmut_freq\trun_CPU_time(s)\tchg_r\tsplit_gen\tchg_gen", append = T);
		
		writeFile(file , sim_id + "\tSEG\t" + NeA + "\t" + NeB + "\t" + s + "\t" + r + "\t" + mu + "\t" + L + "\t" + m + "\t" + mut_pos + "\t" + rise_gen + "\tNF\t" + end_gen + "\t" + samp + "\t" + mutFreq + "\t" + asString(clock(type="mono") - start) + "\t" + chg_r + "\t" + split_gen + "\t" + chg_gen, append = T);
	}
}

// -- SET CONSTANTS NOT CONFIGURED VIA COMMAND LINE --

function (void) defineCfgParam(string$ name, lifs value) {
	if (!exists(name))
		defineConstant(name, value);
}

// -- WRITE CURRENT PARAMETERS TO LOG FILE FOR DEBUGGING --

function (void) debugLog(string file, [string state = ""]) {
	
	if (debug) {
		
		if (state == "RESTART")
		{
			writeFile(debugFile, "-------------- RESTART START --------------", append = T);
		}
		if (state == "KILL")
		{
			writeFile(debugFile, "\n-------------- SLiM INSTANCE KILLED --------------\n", append = T);
		}
		if (state == "CHECKPOINT LOAD")
		{
			writeFile(debugFile, "-------------- RESTART AFTER CHECKPOINT LOAD --------------", append = T);
		}
		if (state == "FAIL COUNT +1")
		{
			writeFile(debugFile, "-------------- RESTART AFTER FAIL COUNT +1 --------------", append = T);
		}
		if (state == "RANDOM SEED")
		{
			writeFile(debugFile, "-------------- RESTART AFTER NEW RANDOM SEED --------------", append = T);
		}
		if (state == "HARD RESET")
		{
			writeFile(debugFile, "-------------- HARD RESTART START --------------", append = T);
		}
		if (state == "SPLIT_GEN")
		{
			writeFile(debugFile, "-------------- HARD RESTART AFTER NEW SPLIT_GEN --------------", append = T);
		}
		if (state == "END_GEN")
		{
			writeFile(debugFile, "-------------- HARD RESTART AFTER NEW END_GEN --------------", append = T);
		}
		if (state == "RISE > END")
		{
			writeFile(debugFile, "-------------- HARD RESTART IF RISE_GEN > END_GEN --------------", append = T);
		}
		if (state == "NEW S")
		{
			writeFile(debugFile, "-------------- HARD RESTART AFTER NEW S --------------", append = T);
		}
		if (state == "RESET FAIL COUNT")
		{
			writeFile(debugFile, "-------------- HARD RESTART - RESET FAIL_COUNT TO 0 --------------", append = T);
		}
		if (state == "RESCHEDULE S1")
		{
			writeFile(debugFile, "-------------- HARD RESTART AFTER RESCHEDULE RISE_GEN --------------", append = T);
		}
		if (state == "RESCHEDULE S2")
		{
			writeFile(debugFile, "-------------- HARD RESTART AFTER RESCHEDULE RISE TO END_GEN --------------", append = T);
		}
		if (state == "RESCHEDULE S3")
		{
			writeFile(debugFile, "-------------- HARD RESTART AFTER RESCHEDULE END_GEN --------------", append = T);
		}
		if (state == "RESTART END")
		{
			writeFile(debugFile, "-------------- RESTART END --------------", append = T);
		}
		
		
		mutFreq = getMutFrequency(p1, m2);
		seed = getSeed();
		
		writeFile(file, sim_id + "\t" + sim.generation + "\t" + mutFreq + "\t" + s + "\t" + rise_gen + "\t" + end_gen + "\t" + split_gen + "\t" + fail_count + "\t" + max_fail + "\t" + seed + "\t" + initSeed, append = T);
	
	}
}


// ---- MUTATION FREQUENCY ----
// - USE IF MULTIPLE POPULATIONS -

function (lifso) getMutFrequency(lifso<Subpopulation> subPop, lifso<MutationType> mutType) {
	counts = subPop.genomes.countOfMutationsOfType(mutType);
	return (mean(counts > 0));
	
	// Example : p1.individualCount = 5 000 ; return = 0.0001
	// -> p1.individualCount * return => 0.5
	// mutation is present in 'half an individual' aka 
	// 1 copy of the mutation on ONE of the two chromosomes of a diploid
}


// ---- RESTART_RUN FUNCTION ----

function (void) restart_run(string$ outcome) {
	
	// ----- LOG REPORT -----
	logReport(logFile, start_clock, outcome);
	
	// ----- DEBUG REPORT -----
	debugLog(debugFile, "RESTART");
	
	// ----- KILL SLiM INSTANCE ? -----
	if (runCount >= runLimit) {
		debugLog(debugFile, "KILL");
		sim.simulationFinished();
	}
	
	// ----- RESTART FROM CHECKPOINT -----
	sim.readFromPopulationFile("checkpoint.txt");
	cat("\n- RESTART - SAVE LOADED -\n");
	
	debugLog(debugFile, "CHECKPOINT LOAD");
	
	// ----- INCREMENT FAIL COUNT BY 1 -----
	defineGlobal("fail_count", fail_count+1);
	
	// ----- INCREMENT RUN COUNT BY 1 -----
	defineGlobal("runCount", runCount+1);
	
	debugLog(debugFile, "FAIL COUNT +1");
	
	// ----- RESET CLOCK -----
	defineGlobal("start_clock", clock(type="mono"));
	
	// ----- DRAW NEW RANDOM SEED -----
	//	setSeed(rdunif(1, 0, asInteger(2^62)-1));
	
	debugLog(debugFile, "RANDOM SEED");
	
	// ----- HARD RESET ? -----	
	
	if (fail_count >= max_fail) {
		cat("FAILS : " + fail_count + " > " + max_fail + "\n- HARD RESET -\n");
		
		debugLog(debugFile, "HARD RESET");
		
		// ----- TIME PARAMETERS -----
		
		//		defineGlobal("split_gen", 5000);
		//		defineGlobal("end_gen", 500);
		//		defineGlobal("rise_gen", 5);
		
		defineGlobal("split_gen", rdunif(1, asInteger(round(0.1*Ne)), 10*Ne));
		
		debugLog(debugFile, "SPLIT_GEN");
		
		defineGlobal("chg_gen", asInteger(runif(1, 0.2*split_gen, 0.5*split_gen)));
		
			// define end_gen from split_gen BUT if 0.2*split_gen < 5, end_gen = 5
			
			if (0.2*split_gen < 5) {
				defineGlobal("end_gen", 5);
			}
			else {
				defineGlobal("end_gen", rdunif(1, 5, asInteger(round(0.2*split_gen))));
			}
		
		debugLog(debugFile, "END_GEN");
		
		// ------ FAIL SAFE ------
		
		while (rise_gen+1 >= end_gen) {
			debugLog(debugFile, "RISE > END");
			defineGlobal("rise_gen", rdunif(1, 2, end_gen));
		}
		
		cat("RISE GEN : " + rise_gen + "\n");
		cat("END GEN : " + end_gen + "\n");
		
		// ----- NEW S -----
		defineGlobal("s", runif(1, (10/(2*Ne)), (500/(2*Ne)) ));
		
		debugLog(debugFile, "NEW S");
		
		cat("NEW S : " + s + "\n");
		
		// ----- RESET FAIL COUNT -----
		defineGlobal("fail_count", 0);
		
		debugLog(debugFile, "RESET FAIL COUNT");
		
		// ---- RESCHEDULE EVENTS ----
		// S1 -  MUTATION |
		// S2 - CHECK FIXATION/LOSS | S3 - LIMIT
		sim.rescheduleScriptBlock(s1, start = rise_gen, end = rise_gen);
		debugLog(debugFile, "RESCHEDULE S1");
		
		sim.rescheduleScriptBlock(s2, start = rise_gen, end = end_gen-1);
		debugLog(debugFile, "RESCHEDULE S2");
		
		sim.rescheduleScriptBlock(s3, start = end_gen, end = end_gen);
		debugLog(debugFile, "RESCHEDULE S3");
	}
	
	debugLog(debugFile, "RESTART END");

}

// -------------------------------------------------------

// --- INITIALIZE ---

initialize() {
	
	// ----- CONFIG PARAMETERS (DEFAULT - USE ONLY FOR TEST PURPOSES) -----	
	
	defineCfgParam("sim_id", 974);
	defineCfgParam("Ne", 500);
	defineCfgParam("r", 1e-8);
	defineCfgParam("mu", 1e-7);
	defineCfgParam("L", 49999);
	defineCfgParam("samp", 20);
	defineCfgParam("chg_r", 10);
	defineCfgParam("m", 0);
	
	defineCfgParam("NeA", asInteger(round(asFloat(Ne*chg_r))));
	defineCfgParam("NeB", Ne);
	
	defineCfgParam("resultsFile", "./" + sim_id + "_sweep_parameters.txt");
	defineCfgParam("logFile", "log.txt");
	defineCfgParam("debugFile", "debug.txt");
	defineCfgParam("initSeed", getSeed());
	
	defineCfgParam("debug", T);
	
	// ----- PREVENT STUCK PARAMETERS - HARD LIMIT TO SLIM KILL ----
	
	defineCfgParam("runLimit", 500); // Number of runs before killing this SLiM instance
	defineGlobal("runCount", 1); // Count number of runs
	
	// ----- DUMMY PARAMETERS (USE ONLY FOR TEST PURPOSES) ----
	
	//defineCfgParam("fix_gen", 777);
	
	// ----- TIME PARAMETERS -----
	
	defineGlobal("start_clock", clock(type="mono"));
	
	//	defineGlobal("split_gen", 5000);
	//	defineGlobal("end_gen", 500);
	//	defineGlobal("rise_gen", 5);
	
	defineGlobal("split_gen", rdunif(1, asInteger(round(0.1*Ne)), 10*Ne));

	// define end_gen from split_gen BUT if 0.2*split_gen < 5, end_gen = 5
	
	if (0.2*split_gen < 5) {
		defineGlobal("end_gen", 5);
	}
	else {
		defineGlobal("end_gen", rdunif(1, 5, asInteger(round(0.2*split_gen))));
	}

	defineGlobal("rise_gen", 4);
	
	defineGlobal("chg_gen", asInteger(runif(1, 0.2*split_gen, 0.5*split_gen)));
	
	
	// ----- MUTATION PARAMETERS -----
	
	defineGlobal("s", runif(1, (10/(2*Ne)), (500/(2*Ne)) )); // papier de Linch ? En dessous de 0.05 Ne ~ Neutre => Avec ces valeurs, garanti quasi un sweep
	
	// ----- TREE-SEQUENCE RECORDING ----- 
	
	initializeTreeSeq();
	
	// ----- GENOMIC ELEMENTS ----- 
	
	initializeMutationRate(0);
	initializeMutationType("m1", 0.5, "f", 0.0);
	initializeMutationType("m2", 0.5, "f", s);
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, L);
	initializeRecombinationRate(r);
	
	
	// ----- CHECKPOINT PARAMETERS -----	
	
	// ------ DEFINE MAX FAIL BASED ON TOLERANCE PARAMETER ------
	defineGlobal("run_count", 1);
	defineGlobal("fail_count", 0);
	defineGlobal("tol", 0.1); //10% expect p(fixation) of ? -> REFERENCE ?
	defineGlobal("max_fail", asInteger(((2*Ne)/20)*tol));
	
	cat("MAX FAIL : " + max_fail + "\n");
	
	
	// ----- FAIL SAFE -----
	
	if (samp > (NeA)) {
		cat("\nERROR - sample size > NeA\nSIMULATION TERMINATED\n");
		writeFile("./error_log.txt", "SIM : " + sim_id + "\nEXIT : samp > NeA", append=T);
		sim.simulationFinished();
	}
	
	while (rise_gen+1 >= end_gen) {
		defineGlobal("rise_gen", rdunif(1, 2, end_gen));
	}
	
	// ----- CAT SIM PARAMETERS ----
	
	cat("NeA : " + NeA + "\n");
	cat("NeB : " + NeB + "\n");
	cat("Ne : " + Ne + "\n");
	cat("RISE GEN : " + rise_gen + "\n");
	cat("END GEN : " + end_gen + "\n");
	cat("SEL. COEF. S : " + s + "\n");

}

// -------------------------------------------------------

// --- ADDING POPULATIONS ---

1:1000000 late() {
	debugLog(debugFile);
}

1 {
	sim.addSubpop("p1", NeA);
	//	sim.addSubpop("p2", NeB);
	//	p1.setMigrationRates(p2, m);
	
	// ---- RESCHEDULE EVENTS ----
	// S1 -  MUTATION |
	// S2 - CHECK FIXATION/LOSS | S3 - LIMIT
	sim.rescheduleScriptBlock(s1, start = rise_gen, end = rise_gen);
	sim.rescheduleScriptBlock(s2, start = rise_gen, end = end_gen-1);
	sim.rescheduleScriptBlock(s3, start = end_gen, end = end_gen);

}

// --- CHECKPOINT --- //

1 late() {
	cat("CHECKPOINT\n");
	sim.outputFull("checkpoint.txt");
}


//2 early() {
//	p1.setMigrationRates(p2, m);
//
//}

// --- ADD MUTATION --

s1 4 late() {
	target = sample(p1.genomes, 1);
	defineGlobal("mut_pos", rdunif(1, 0, L));
	target.addNewDrawnMutation(m2, mut_pos);
	
	cat("MUTATION POSITION : " + mut_pos + "\n");
}

// --- CHECK MUTATION FIXATION ---

s2 3:3 late() {
	
	if (exists("fix_gen")) {}
	
	else {
		
		if (sim.countOfMutationsOfType(m2) == 0)
		{
			fixed = (sum(sim.substitutions.mutationType == m2) == 1);
			
			if (fixed)
			{
				defineConstant("fix_gen", sim.generation);
				cat("gen° " + sim.generation + " - MUTATION FIXED\n");
			}
			
			else
			{
				defineGlobal("loss_gen", sim.generation);
				cat("gen° " + sim.generation + " - MUTATION LOST\n");
				// ---- RESTART TO CHECKPOINT ----
				restart_run("LOSS");
			}
		}
	}
}

// --- SIMULATION HARD TIME LIMIT ---

s3 200000 late() {
	
	
	// ---- OUTPUT IF FIXED ----		
	
	if (exists("fix_gen")) {
		
		cat("- SUCCES - MUTATION FIXED -\n");
		
		// ----- WRITE TREE & PARAMETERS FILE -----	
		sim.treeSeqOutput("./" + sim_id + "_sweep.trees");
		logReport(resultsFile, start_clock, "FIXED");
		
		// ----- DELETE CHECKPOINT -----	
		deleteFile("checkpoint.txt");
		
		// ----- END WORDS -----
		sim.simulationFinished();
		cat("SIM FINISHED WITH MUT FIXED");
	
	}
	
	// --- ELSE, CHECK IF FIXED AT END_GEN ---	
	
	else {
		
		if (sim.countOfMutationsOfType(m2) == 0)
		{
			fixed = (sum(sim.substitutions.mutationType == m2) == 1);
			
			if (fixed)
			{
				defineConstant("fix_gen", sim.generation);
				cat("gen° " + sim.generation + " - MUTATION FIXED\n");
				
				cat("- SUCCES - MUTATION FIXED -\n");
				
				// ----- WRITE TREE & PARAMETERS FILE -----	
				sim.treeSeqOutput("./" + sim_id + "_sweep.trees");
				logReport(resultsFile, start_clock, "FIXED");
				
				// ----- DELETE CHECKPOINT -----	
				deleteFile("checkpoint.txt");
				
				// ----- END WORDS -----
				sim.simulationFinished();
				cat("SIM FINISHED WITH MUT FIXED");
			}
			
			else
			{
				defineGlobal("loss_gen", sim.generation);
				cat("gen° " + sim.generation + " - MUTATION LOST\n");
				// ---- RESTART TO CHECKPOINT ----
				restart_run("LOSS");
			}
		}
		
		else {
			mutFreq = sim.mutationFrequencies(p1);
			
			// ----- OUTPUT IF FREQ > 0.1 -----	
			
			if (mutFreq > 0.1) {
				
				cat("- SUCCES - MUTATION FREQ = " + mutFreq + "> 0.1 -\n");
				
				// ------ WRITE TREE & PARAMETERS FILE ------	
				sim.treeSeqOutput("./" + sim_id + "_sweep.trees");
				logReport(resultsFile, start_clock, "SEG");
				
				
				// ------ DELETE CHECKPOINT ------	
				deleteFile("checkpoint.txt");
				
				// ------ END WORDS ------
				sim.simulationFinished();
				cat("SIM FINISHED WITH MUT FREQ = " + sim.mutationFrequencies(p1));
			
			
			}
			
			// ----- IF FREQ < 0.1 -----		
			
			else {
				
				cat("gen° " + sim.generation + " - MUTATION LOWF\n");
				defineGlobal("loss_gen", sim.generation);
				
				// ---- RESTART TO CHECKPOINT ----
				
				restart_run("LOWF");
			
			}
		}
	}
}
